snmptranslate -  узнав о MIB дерева.
snmpget -  получение данных от хоста.
snmpgetnext - получение неизвестных индексированных данных.
snmpwalk - извлечение больших объемов данных сразу!
snmptable - отображение таблицы.
SNMPSET -  peforming операции записи.
snmpbulkget - общается с сетевым объектом, используя SNMP GetBulk запрос
snmpbulkwalk - получить суб-дерево значений управления, используя SNMP GetBulk запросы.
SNMPTRAP - Отправка и получение ловушки, и действуя на них.
Traps/informs with SNMPv3/USM -  Отправка и получение SNMPv3 / USM ловушек и информирует
Sending Traps/Informs via AgentX -  Отправка уведомлений из командной строки через SNMPD


Общие параметры командной строки:
Использование и загрузка MIBS - http://www.net-snmp.org/wiki/index.php/TUT:Using_and_loading_MIBS
SNMPv3 / Опции USM  - http://www.net-snmp.org/wiki/index.php/TUT:SNMPv3_Options
Использование SNMPv3 над TLS и DTLS http://www.net-snmp.org/wiki/index.php/TUT:Using_TLS
Индивидуальные форматы вывода - http://www.net-snmp.org/wiki/index.php/TUT:Customized_Output_Formats
Написание конфигурационных файлов mib2c - http://www.net-snmp.org/wiki/index.php/TUT:mib2c_config_files


==================   Инициализация и завершение  =============================

add_mibdir - используется для добавления указанный каталог к пути местах, 
				которые искали файлов, содержащих модули MIB. Отметим, что
				это на самом деле не загрузить модули MIB, расположенные в этом 
				каталоге, но это просто инициализации шаг, чтобы сделать их доступными
				 для netsnmp_read_module. Эта функция возвращает количество найденных 
				 файлов в каталоге, или -1, если произошла ошибка.
				 
init_mib_internals - устанавливает внутренние структуры, подготовительная к чтению в модулях MIB.
					Следует назвать ведь звонки на add_mibdir, и перед любыми вызовами netsnmp_read_module.

init_mib -  удобная функция, которая настраивает поиска в каталоге путь MIB (используя add_mibdir), 
			настроить систему внутреннего MIB (используя init_mib_internals), а затем загружает 
			подходящие модули MIB (используя netsnmp_read_module и read_mib). Смотрите раздел переменных 
			окружающей среды на детали.
			Следует назвать перед любой другой программе, которая манипулирует или обращается к MIB дерево.

shutdown_mib - будет удалить информацию, которая была собрана по netsnmp_read_module,
				add_mibdir и add_module_replacement. Настоятельно рекомендуется, чтобы один не 
				вызывает shutdown_mib а есть сеансы SNMP активно управлять.

=================  Чтение и анализ данных MIB  ==============================

netsnmp_read_module - принимает имя модуля MIB (которые не обязательно должны быть такими же, как имя файла, 
					  содержащего модуль), находит это в течение заданного списка MIB каталогов, и загружает
					  определения из модуля в активной MIB дерева. Он также загружает все модули MIB, перечисленные 
					  в пункте Импорт этого модуля.
					 
read_mib похож -  но принимает имя файла, содержащего модуль MIB. Обратите внимание, 
				  что этот файл не должен быть расположен в пределах списка поиска каталог MIB 
				  (хотя любые модули, перечисленные в пункте Импорт сделать).

read_all_mibs - будут читать во всех модулях MIB найденных в списке поиска каталогов MIB.
				В общем парсер молчит о том, что странности его видит в файлах MIB.
				Чтобы получать предупреждения сообщалось, вызов snmp_set_mib_warnings с уровнем 1
				(или 2 для еще более предупреждений).

add_module_replacement -  можно использовать, чтобы новые модули MIB на устаревших старых,
						  без необходимости вносить изменения в импорте положения других модулей. 
						  Он принимает имена старых и новых модулей, с указанием которой части старого модуля страдают.
						  Он также может быть использован для обработки ошибок в идентификаторах модулей, используемых в MIB: импорт
						  положения (например, со ссылкой на RFC1213 вместо RFC1213-MIB).
						  
===========================  Поиск в MIB дерево  ============================

read_objid - принимает строку, содержащую текстовую версию идентификатором 
			 объекта (в любом числовом или дескрипторов форме), и преобразует это в соответствующем списке
			 суб-идентификаторов. Это возвращается в выходной параметр, с числом суб-идентификаторов, 
			 возвращенных через out_len. При вызове, out_len должны иметь максимальную длину выходного массива. 
			 Если обрабатываются несколько идентификаторы объектов, то эта длина должна быть сброшена перед каждым вызовом. 
			 Эта функция возвращает значение 1, если он преуспевает в разборе строки и 0 в противном случае.
			 
snmp_parse_oid - похож, но возвращает указатель на разобранной OID буфера (или NULL).

get_module_node - принимает дескриптор и имя модуля, и возвращает соответствующий список OID, таким же образом, как read_objid выше.
Если имя модуля указывается как "ЛЮБОЙ", то эта процедура будет предположить, что дескриптор учитывая является уникальным в дереве, и вернет соответствующий вход. Если это предположение является недействительным, то поведение, какие переменные возвращают зависит от реализации.
Вы можете улучшить качество Переводчика Google здесь.
Переводчик Google для бизнеса –Инструменты переводчика
